= PostgreSQL 11.14 Install
:toc:
:toc-title:

== RPM Install

=== CentOS 관련 패키지 설치
----
yum -y install gcc gcc-c++ make autoconf readline readline-devel zlib zlib-devel openssl openssl-devel gettext gettext-devel python python python-devel wget
----
----
rpm -ivh http://mirror.centos.org/centos/7/os/x86_64/Packages/libicu-50.2-4.el7_7.x86_64.rpm
rpm -ivh http://mirror.centos.org/centos/7/os/x86_64/Packages/libxslt-1.1.28-6.el7.x86_64.rpm
----

=== RPM 설치 방법
link:https://yum.postgresql.org/11/redhat/rhel-7-x86_64/repoview/postgresqldbserver11.group.html[PostgreSQL 11.14 RPM files Download]

[width="100%", options="header"]
|====================
|Package |Description
|postgresql11-libs |The shared libraries required for any PostgreSQL clients
|postgresql11 |PostgreSQL client programs and libraries
|postgresql11-server|The programs needed to create and run a PostgreSQL server
|postgresql11-contrib|Contributed source and binaries distributed with PostgreSQL
|====================

----
#postgresql11-libs (11.14)
rpm -ivh https://yum.postgresql.org/11/redhat/rhel-7-x86_64/postgresql11-libs-11.14-1PGDG.rhel7.x86_64.rpm
#postgresql11 (11.14)
rpm -ivh https://yum.postgresql.org/11/redhat/rhel-7-x86_64/postgresql11-11.14-1PGDG.rhel7.x86_64.rpm
#postgresql11-server (11.14)
rpm -ivh https://yum.postgresql.org/11/redhat/rhel-7-x86_64/postgresql11-server-11.14-1PGDG.rhel7.x86_64.rpm
#postgresql11-contrib (11.14)
rpm -ivh https://yum.postgresql.org/11/redhat/rhel-7-x86_64/postgresql11-contrib-11.14-1PGDG.rhel7.x86_64.rpm
----



=== RPM 설치 완료
설치 완료 시 아래와 같이 생성됨

* postgres OS user 생성
* /usr/pgsql-11 디렉토리 생성
* /var/lib/pgsql/11 디렉토리 생성

== YUM Install
PostgreSQL Repository 추가 + 
`rpm -Uvh https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm`

== Source code Install
=== CentOS 관련 패키지 설치
아래의 라이브러리가 설치 되어야 소스코드 방식 설치가 가능함. + 
라이브러리는 추후에 소스 릴리즈에 포함될 수 있으므로 추후 문서 최신화 필요 + 
----
yum -y install gcc gcc-c++ make autoconf readline readline-devel zlib zlib-devel openssl openssl-devel gettext gettext-devel python python python-devel wget git bison flex
----

=== Git 환경설정

==== 1. Git token 생성
먼저 git 계정의 패스워드를 대체할 토큰을 발급해야함 + 
git 홈페이지에서 로그인 후 우측 상단의 프로필을 클릭 후 Settings + 
좌측 탭의 <> Developer Settings 클릭 후 좌측의 Personal access tokens 클릭 + 
Generate new token하여 토큰 생성 +
----
Note : 토큰 사용 용도에 대한 설명을 적는 것이므로 필요에 따라 작성

Expiration : 토큰 만료 기한을 설정, No expiration
Repo 모두 체크

이 외의 값들은 설치 과정에서 필요하지 않으므로 생략

Generate token
---- 

토큰 값을 잃어버릴 경우 재생성 해야 하므로 보관 필수


==== 2. Git에서 소스코드 받아오기
소스코드를 받아올 디렉토리 생성(계정 상관없으나 설치시 root권한 필요)
----
mkdir /hypersql
cd /hypersql
git init

git clone https://github.com/tmaxtibero3/HyperSQL-PostgreSQL.git
Username은 본인의 git username
password는 토큰 입력
----

입력하면 git init을 진행한 디렉토리 하위에, HyperSQL-PostgreSQL 디렉토리 생성됨

==== 3. 설치
*root 계정으로 진행*
----
cd HyperSQL-PostgreSQL
chmod 755 * -R
./configure
make
make install
----

설치시 바이너리는 아래의 위치에 생성됨. + 
/usr/local/pgsql

== PostgreSQL 환경설정 및 시작

=== 1. 환경 변수 설정

* postgres OS user 접속
----
su - postgres
----

* .bash_profile 수정
----
PS1="[\u@\h:\W]$ "
export POSTGRES_VERSION=11
export MANPATH=/usr/pgsql-11/share/man:$MANPATH
export PGDATA=/var/lib/pgsql/11/data
export PATH=/usr/pgsql-11/bin:$PATH
export LD_LIBRARY_PATH=/usr/pgsql-11/lib:$LD_LIBRARY_PATH

소스 설치 방식일 경우 export PATH=/usr/local/pgsql/bin:$PATH로 변경해주어야함.
----

* .bash_profile 적용
----
. .bash_profile
----


=== 2. Database Cluster 생성
----
initdb -D /var/lib/pgsql/11/data -U postgres
----

=== 3. Timezone 확인 및 설정
* postgresql.conf
----
timezone = 'Asia/Seoul'
log_timezone = 'Asia/Seoul'
----

=== 4. 접속 설정
* 외부에서 Client 를 통하여 접속할 경우 $PGHOST, $PGPORT 환경변수를 지정한다.
* postgresql.conf
----
listen_addresses='*'
port=5432
----

* 외부의 접속 허용을 정의한다.
* pg_hba.conf
----
# TYPE    DATABASE        USER        ADDRESS        METHOD
host      all             all         <IP>/<CIDR>      md5
----

* 방화벽 설정
----
firewall-cmd --permanent --zone=public --add-port=5432/tcp
firewall-cmd --reload
----


=== 5. PostgreSQL 서버 실행
----
pg_ctl start
----

=== 6. PostgreSQL 서버 종료
----
pg_ctl stop
----

=== 7. PostgreSQL 서버 접속
----
psql -h localhost
----

